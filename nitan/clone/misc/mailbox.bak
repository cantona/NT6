#include <ansi.h>
#include <net/macros.h>
#include <net/dns.h>

inherit ITEM;
inherit F_SAVE;

mapping *mails;

void get_mail_text(mapping mail, string str);

void create()
{
        set_name("信箱", ({ "mailbox", "box" }) );
        set("long",
                "這是一個用來寄信、收信的信箱，你可以用以下指令來處理你的郵件：\n\n"
                "mail <某人>               寄信給別人。\n"
                "forward <信件編號> <某人> 將某封信轉寄給別人。\n"
                "from                      查看信箱中的信件。\n"
                "read <信件編號>           閱讀一封信件。\n"
                "discard <信件編號>        丟棄一封信件。\n"
        );
        set("unit", "個");
        set("no_put", 1);
        set("no_drop", 1);
        set("no_get", 1);
        set("no_steal", 1);
        set("no_sell", 1);
        set("no_insert", 1);

        seteuid(getuid());
}

int set_owner(string id)
{
        set("owner_id", id);
        return restore();
}

void init()
{
    object me,ob;
        int i,j;
    string id;

    if( (me=this_player()) && environment()==me)
        {
        id=query("id", me);
        set_owner(id);
        set_name( me->name(1) + "的信箱", ({ "mailbox", "box" }) );
                add_action("do_mail", "mail");
                add_action("do_forward", "forward");
                add_action("do_from", "from");
                add_action("do_read", "read");
                add_action("do_discard", "discard");
        if(!query("no_put"))
        {
            set("no_put",1);
            save();
        }
                if( pointerp(mails) && sizeof(mails) ) 
                {
                        j = 0;
                        for(i=0; i<sizeof(mails); i++)
                        {
                                if(!mails[i]["read"])
                                        j += 1;
                        }
                        if( j > 0)
                        write(HIY"你有 "+j+" 封沒讀過的信，請用 from 指令查看。\n"NOR);
            else
            {
                if("/adm/daemons/mail.c"->query_mail(id))
                    "/adm/daemons/mail.c"->delete_mail(id);
            }
                }
                return;
        }
}

string query_save_file()
{
        string id;

        if( !stringp(id = query("owner_id")) ) return 0;

        return DATA_DIR + "mail/" + id[0..0] + "/" + id;
}

void receive_mail(mapping mail)
{
        if( !pointerp(mails) ) mails = ({ mail });
        else mails += ({ mail });
        save();
}

void send_mail(string rcvr, mapping mail)
{
        object ppl, ob, mbx;
        string new_mail;

        if(ppl = find_player(rcvr) )
        {
                if(mbx = present("mailbox",ppl))
            {
                tell_object(ppl, HIY "你又有信了！快用 from 指令查看！\n" NOR );
                mbx->receive_mail(mail);
            }
                else
                {
                tell_object(ppl, HIY "你有信喲！請到附近的驛站去收取你的信件！\n" NOR );        
                        mbx = new(MAILBOX_OB);
                        mbx->set_owner(rcvr);
                        mbx->receive_mail(mail);
                        destruct(mbx);
                }
        }
        else
        {
                mbx = new(MAILBOX_OB);
                mbx->set_owner(rcvr);
                mbx->receive_mail(mail);
                destruct(mbx);
                if(!new_mail = "/adm/daemons/mail.c"->query_mail(rcvr))
                        "/adm/daemons/mail.c"->set_mail(rcvr);
        }
        return;
}

int do_mail(string arg)
{
    object mbx;
    mapping mail;
    string mud;
        
    if( this_player()!=environment() ) return 0;

    if( !arg || arg=="" )
        return notify_fail("你要寄信給誰？\n");

    if (sscanf(arg, "%s@%s", arg, mud) == 2)
    {
        if (mud != mud_nname())
        {
            mail = ([
                "from":this_player()->name(1)+"("+query("id", this_player())+"@"+mud_nname()+")",
                "title": "無題",
                "to": arg,
                "time": time(),
                "text": "",
                "net" : 1,
                "mud": mud
            ]);
            write("信件標題：");
            input_to("get_mail_title", mail);
            return 1;
        }
    }

    if(file_size(DATA_DIR + "user/" + arg[0..0] + "/" + arg + ".o")<0)
        return notify_fail("沒有這個人！\n");

    mbx=new(MAILBOX_OB);
    mbx->set_owner(arg);
    if(!mbx->check_mail())
        write("對方信箱已經塞滿，無法發信，請用其它方式通知對方將信箱內信件刪至30封以下。\n");
    else
    {
        mail = ([
                "from":this_player()->name(1)+"("+query("id", this_player())+")",
                "title": "無題",
                "to": arg,
                "time": time(),
                "text": "",
                "net": 0
        ]);
        write("信件標題：");
        input_to("get_mail_title", mail);
    }
    destruct(mbx);
    return 1;
}

void get_mail_title(string str, mapping mail)
{
        if( str!="" ) mail["title"] = str;
        write("信件內容：\n");
        this_player()->edit( (: get_mail_text, mail :) );
}

void get_mail_text(mapping mail, string str)
{
        mail["text"] = str;
        write("您自己要留一份備份嗎(y/n)？[n]");
        input_to("confirm_copy", mail);
}

void confirm_copy(string yn, mapping mail)
{
        if( yn[0]=='y' || yn[0]=='Y' ) receive_mail(mail);
        if (mail["net"])
        {
                GMAIL->send_gmail(mail["mud"], mail["to"], this_player(), mail);
                write("\n網路訊息已送出，可能要稍候才能得到回應。\n");
        }
        else
        {
                send_mail(mail["to"], mail);
                write("Ok.\n");
        }
}

int do_from()
{
        int i;
        string new_mail,id;
        
        id=query("id", this_player());
        new_mail = "/adm/daemons/mail.c"->query_mail(id);
        if(new_mail)
                "/adm/daemons/mail.c"->delete_mail(id);

        if( !pointerp(mails) || !sizeof(mails) ) 
        {
                write("你的信箱中目前沒有任何信件。\n");
                return 1;
        }
        write("你的信箱中現在共有 " + sizeof(mails) + " 封信件：(“"+HIR+"新"+NOR+"”表示未讀過的信。)\n\n");
        for(i=0; i<sizeof(mails); i++)
                printf("%2d %-36s  寄信人：%s %s\n",
                        i+1, mails[i]["title"], mails[i]["from"],mails[i]["read"]? "": HIR"新"NOR,);
    if(sizeof(mails)>30)
        write("\n提醒：信箱郵件超過30封將無法收到新郵件，請盡快將舊郵件刪除掉。\n");
        write("\n");

        return 1;
}

int do_read(string arg)
{
        int num;
        mapping mail;

        if( !arg || !sscanf(arg, "%d", num) )
                return notify_fail("你要讀哪一封信？\n");

        if( !pointerp(mails) || num < 1 || num > sizeof(mails) )
                return notify_fail("沒有這個編號的信件。\n");

        num --;

        mail = mails[num];
        printf("信件標題：%s\n寄 信 人：%s  %s\n\n%s\n",
        mail["title"], mail["from"], ctime(mail["time"]),mail["text"] );

        if(!mail["read"])
                mail += (["read":1]);  //表示讀過了

        save();
        return 1;
}

int do_discard(string arg)
{
        int num;

        if( !arg || !sscanf(arg, "%d", num) )
                return notify_fail("你要丟棄哪一封信？\n");

        if( !pointerp(mails) || num > sizeof(mails) )
                return notify_fail("沒有這個編號的信件。\n");

        num --;

        if(num == 0)
                mails = mails[num+1..sizeof(mails)-1];
        else
                mails = mails[0..num-1] + mails[num+1..sizeof(mails)-1];
        save();
        write("Ok.\n");

        return 1;
}

int do_forward(string arg)
{
        object mbx;
        string dest,mud;
        int num;
        mapping m;

        if( !arg || sscanf(arg, "%d %s", num, dest)!=2 )
                return notify_fail("你要將哪一封信轉寄給別人？\n");

        if( !pointerp(mails) || num > sizeof(mails) )
                return notify_fail("沒有這個編號的信件。\n");

    if (sscanf(dest, "%s@%s", dest, mud) == 2)
    {
        if (mud != mud_nname())
        {
            num --;

            m = ([
                "from":mails[num]["from"]+"/轉寄自"+query("name", this_player())+"@"+mud_nname(),
                "title": mails[num]["title"],
                "to": dest,
                "time": time(),
                "text": mails[num]["text"],
            ]);
           GMAIL->send_gmail(mud, dest, this_player(), m);
           write("網路訊息已送出，可能要稍候才能得到回應。\n");
           return 1;
        }
    }

    if(file_size(DATA_DIR + "user/" + dest[0..0] + "/" + dest + ".o")<0)
        return notify_fail("沒有這個人！\n");

    mbx=new(MAILBOX_OB);
    mbx->set_owner(dest);
    if(!mbx->check_mail())
        write("對方信箱已經塞滿，無法發信，請用其它方式通知對方將信箱內信件刪至30封以下。\n");
    else
    {

        num --;

        m = ([]);
        m["title"] = mails[num]["title"];
        m["text"] = mails[num]["text"];
        m["time"] = mails[num]["time"];
        m["from"]=mails[num]["from"]+"/轉寄自"+query("name", this_player());
        m["to"] = dest;
        send_mail( dest, m );
        write("Ok.\n");
    }
    destruct(mbx);
    return 1;
}

void owner_is_killed()
{
        destruct(this_object()); 
}

int check_mail()//檢查對方信箱是否已滿
{
    if( sizeof(mails) > 30 ) return 0;
    else return 1;
}

string remote_mail(string arg, string allname, mapping mail)
{
    object mbx;

    if(file_size(DATA_DIR + "user/" + arg[0..0] + "/" + arg + ".o")<0)
        return "沒有這個人！\n";

    mbx=new(MAILBOX_OB);
    mbx->set_owner(arg);
    if(!mbx->check_mail())
    {
        destruct(mbx);
        return "對方信箱已經塞滿，無法發信，請用其它方式通知對方將信箱內信件刪至30封以下。\n";
    }
    destruct(mbx);
    send_mail(arg, mail);
    return "您的郵件已經成功發送給了" + allname + "！\n";
}
