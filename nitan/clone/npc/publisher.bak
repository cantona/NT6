// publisher.c

#include <ansi.h>
#include <localtime.h>

inherit NPC;
inherit F_SAVE;
inherit F_UNIQUE;

int ask_book();
int ask_sell();
void check_book();
void enough_rest();
void clear_book();


string is_vendor_good(string arg);
string query_book_file( string arg);

mapping *sell_list;

string query_save_file()
{
                  return "/data/npc/publisher";
}


void create()
{
        set_name("王老板", ({ "wang laobang", "publisher", "wang"}));
        set("long", "這是一位白白胖胖的中年人，身子微微發福，是個富商豪紳模樣。\n"
        "他手中提著一個小箱子，正笑眯眯地上下打量著你。\n"
        "據說他曾經試過科舉，但幾次不中後便改行以販書為業了。\n");
        set("gender", "男性");
        set("age", 45);
        set("weight", 50000);
        set("str", 25);
        set("dex", 25);
        set("attitude", "peaceful");

        set("combat_exp", 75000);
        set("shen_type", 0);

        set_skill("unarmed", 60);
        set_skill("force", 60);
        set_skill("literate", 300);

        set("neili", 4000); 
        set("max_neili", 4000);
        set("jiali", 500);

        set("owner", 1);
        set("no_clean_up", 1);

        set("inquiry", ([
                "profit" : (: ask_book :),
        ]));

    set("vendor_goods", ({
                                        
                  "/d/city/obj/newbook1",
    }));

//    set("chat_chance", 3);
//        set("chat_msg",({
//               (: check_book :),
//    }));

 
    if(!restore())
        {
                setup();
        }

    carry_object("/clone/cloth/cloth")->wear();

    remove_call_out("check_book");
    call_out("check_book", 3+random(5) );

}


int init()
{
  object ob;
  ob = this_player();
  ::init();

  add_action("do_list", "list");
  add_action("do_buy", "buy");
  add_action("do_publish","publish");
  add_action("do_discard","discard");

  if( interactive(ob = this_player()) && !is_fighting() ) {
       remove_call_out("greeting");
       call_out("greeting", 1, ob);
  }

}

void greeting(object ob)
{
        if( !ob || environment(ob) != environment() ) return;
        message_vision(        "$N朝$n微微笑了笑。\n",this_object(),ob );
        switch( random(2) ) {
                case 0:
                        command( "say 這位" + RANK_D->query_respect(ob)
                                + "，想要刊行您的著作嗎？這可找對人了。\n");
                        break;
                case 1:
                        command( "say 這位" + RANK_D->query_respect(ob)
                                + "，我這有各種江湖文士寫的筆錄，看看您想要買哪一本。\n");
                        break;
        }
}


int do_publish(string arg)
{
        object me, this_book, save_book;
    mapping book_content;

    if(!arg) return notify_fail("您要刊行什麼？\n");

        me = this_player();
    this_book = present(arg, me);

    if(!this_book)
            return notify_fail("你身上好像並沒有這樣東西？\n");
    if( !query("publishable", this_book) )
            return notify_fail("對不起！這樣東西我無法刊印。\n");
    if(me->is_busy())
            return notify_fail("你現在正忙著呢。\n");



// get the book content 
    book_content=query("book_content", this_book);
// stamp on time, number of book sold, money made and the marker not to discard it
// also set the initial price to be 20 silver
        book_content["publish_time"] = ctime(time());
        book_content["book_sold"] = 0;
        book_content["money_made"] = 0;
        book_content["keep_marker"] = 0;
        book_content["current_price"] = 2000;
    save_book=new("/clone/misc/save_book");
    save_book->set_owner(book_content["arthur_id"]);
    save_book->save_this_book(book_content);
    message_vision(        "$N高高興興地把$n寫的稿紙拿去刊印了。\n\n",this_object(),me );

    destruct(save_book);
        destruct(this_book);

   remove_call_out("check_book");
   call_out("check_book", 1 );

    return 1;
}

int do_discard(string arg)
{
        object me;
    int book_no, value, val_factor, i, k, book_found;
    string ob_file, file;
    object ob, obj, *inv;

    if(!arg) return notify_fail("您要收回什麼？\n");

        me = this_player();

    if(me->is_busy())
            return notify_fail("你現在正忙著呢。\n");

        k = 0;
                book_found = 0;

                if( sscanf(arg, "book%d", book_no) == 1 ) 
                {
            inv = all_inventory(this_object());
                        if(!sizeof(inv))
                            return notify_fail("你想收回的東西我這裡沒有。\n");
            for (i = 0; i < sizeof(inv); i++) 
                     {
                if( query("can_sell_book", inv[i]) )
                                {
                                        k++;
                                    if ( k == book_no ) {
                                           ob = inv[i];
                                           book_found = 1;
                                           break;
                                        }
                                 }
                    }
                        if (!book_found)
                                return notify_fail("你想收回的東西我這裡沒有。\n");
                }
                else 
                {
                        return notify_fail("你想收回的東西我這裡沒有。\n");
        }

                
        if (query_temp("busy"))
                return notify_fail("喲，抱歉啊，我這兒正忙著呢……您請稍候。\n");

                if( (query("new_book", ob))["arthur_id"] != query("id", me) && !wizardp(me) )
                        return notify_fail("你又不是主人。\n");

            message_vision("$N聽從$n命令把"+(query("new_book", ob))["arthur"]+"寫的"+(query("new_book", ob))["title"]+"從書架上取掉了。\n\n",
                this_object(),me );

        obj=new("/clone/misc/save_book");
        obj->set_owner((query("new_book", ob))["arthur_id"]);
        obj->discard_book((query("new_book", ob))["title"]);

                destruct(obj);
                destruct(ob);

    return 1;
}

int do_list()
{
        string *goods, long_name;
        object *inv;
        int i, j, k;

                remove_call_out("check_book");
                call_out("check_book", 0 );

        inv = all_inventory(this_object());
                k = 0;
        if (!sizeof(inv) && !arrayp(goods = query("vendor_goods")))
                return notify_fail("目前沒有可以買的東西。\n");
        // list the cloneable goods
        if (arrayp(goods = query("vendor_goods"))){
                for (i = 0; i < sizeof(goods); i++)
                        printf("%65-s：%s\n", goods[i]->short(),
                        MONEY_D->price_str(query("value", goods[i])));
        }
                // list the inventory for sell
        for (i = 0; i < sizeof(inv); i++) 
                {
                if( query("can_sell_book", inv[i]) )
                                {
                                        k++;
                                        long_name=sprintf("%s(%s%d)",(query("new_book", inv[i]))["title"],query("id", inv[i]),k);
                    printf("%35-s 【作者】%20-s ：%s\n", long_name, 
                    (query("new_book", inv[i]))["arthur"],MONEY_D->price_str(query("value", inv[i])));
                                }
                }
        return 1;
}       

int do_buy(string arg)
{
        int book_no, value, val_factor, i, k, book_found;
        string ob_file, file;
        object ob, obj, *inv,soldbook;


        k = 0;
                book_found = 0;
        if (!arg)
                return notify_fail("你想買什麼？\n");
        if( ob && query("money_id", ob) )
                return notify_fail("你想買「錢」？？\n");

                if (arg == "book")
                {
                    ob_file = is_vendor_good(arg);
                        ob = new(ob_file);
                        val_factor = 10;
                }
                else if( sscanf(arg, "book%d", book_no) == 1 ) 
                {
            inv = all_inventory(this_object());
                        if(!sizeof(inv))
                            return notify_fail("你想買的東西我這裡沒有。\n");
            for (i = 0; i < sizeof(inv); i++) 
                     {
                if( query("can_sell_book", inv[i]) )
                                {
                                        k++;
                                    if ( k == book_no ) {
                                           ob = inv[i];
                                           book_found = 1;
                                        }
                                 }
                    }
                        if (!book_found)
                                return notify_fail("你想買的東西我這裡沒有。\n");
                }
                else 
                {
                        return notify_fail("你想買的東西我這裡沒有。\n");
        }

                
        if (query_temp("busy"))
                return notify_fail("喲，抱歉啊，我這兒正忙著呢……您請稍候。\n");
                                

        
  switch(MONEY_D->player_pay(this_player(),query("value", ob))){
        case 0:
                return notify_fail("窮光蛋，一邊呆著去！\n");
        case 2:
                return notify_fail("您的零錢不夠了，銀票又沒人找得開。\n");
        default:
                set_temp("busy", 1);
                message_vision("$N從$n那裡買下了一"+query("unit", ob)+
                query("name", ob)+"。\n",this_player(),this_object());
                                // save the number of book sold and money made to file
                                if(book_found) {
                   obj=new("/clone/misc/save_book");
                   obj->set_owner((query("new_book", ob))["arthur_id"]);
                   obj->save_book_sold(query("book_number", ob),query("value", ob)/2);
                                    //soldbook = obj->get_new_book();
                                   destruct(obj);
                                }
                //soldbook->move(this_player());
                                ob->move(this_player());
        }
        remove_call_out("enough_rest");
        call_out("enough_rest", 1);

        return 1;
}

string is_vendor_good(string arg)
{
        string *goods;
        object ob;
        int i;

        if (arrayp(goods = query("vendor_goods"))) 
                for (i = 0; i < sizeof(goods); i++) 
                        if (goods[i]->id(arg))
                                return goods[i];
        return "";
}

void enough_rest()
{
        delete_temp("busy");
}

string query_book_file( string arg)
{
         return sprintf( DATA_DIR "book/%c/%s", arg[0], arg );
}

void check_book()
{

   string *dir_list, *time_list;
   string file, arthur_id, time_lable; 
   object new_book, real_book, *inv, temp_book;
   mixed *file_list;
   int i, j, k, l, call_time;
   mapping book_info;
   mixed *local;
   object me = this_object();

   // get our local time first
   local = localtime(time()*60);

   if( !(query("last_clear_book_time", me))){
          // this is the first time we clearing the book
          // record the current year
          set("last_clear_book_time", local[LT_YEAR], me);
   }
   else {
          // we have recorded a time before, so let's check if we need
          // to clear the books
          if( (local[LT_YEAR]-query("last_clear_book_time", me)) == 1){
                  // ok one year has passed, time to clear the books
                  // first set our new clear book time
          set_temp("busy", 1);
              set("last_clear_book_time", local[LT_YEAR], me);
                  clear_book();
          delete_temp("busy");
          }
          else {
                  // if the time is messed up, refresh our count
              set("last_clear_book_time", local[LT_YEAR], me);
          }
   }

   time_list = ({});
   k = 0;
   inv = all_inventory(this_object());
   if (!sizeof(inv))
       k = 0;
   else {
          // build my book time list
          for (i = 0; i<sizeof(inv); i++) {
                 if( query("can_sell_book", inv[i])){
                   time_list+=({query("time_stamp", inv[i])});
                   k++;
                 }
          }
      // if the there are 40 books, get ride one of them, randomly
      if (k>399) {
              l = random(sizeof(inv));
                  if( query("can_sell_book", inv[l])){
                         temp_book = inv[l];
                          time_list-=({query("time_stamp", inv[l])});
                         destruct(temp_book);
                  }
      }
   }

   // if publisher have 20 book in his invertory, slow down checking for new books
   if (k<20) 
          call_time = 10;
   else
      call_time = 360;

   //  get my random arthur
   dir_list = explode("a b c d e f g h i j k l m n o p q r s t u v w x y z", " ");
   //   dir_list = explode ("a s"," ");
   //i = random(26);
   for(i=0;i<26;i++)
   {
        file_list = get_dir(DATA_DIR + "book/" + dir_list[i] + "/");
        // if no file, then exit
        if (!sizeof(file_list)) {
                  // do nothing here
        }
        else {
                //  j = random(sizeof(file_list));
                for(j=0;j<sizeof(file_list);j++)
                {

                sscanf(file_list[j], "%s.o", arthur_id);
        
                file = query_book_file( arthur_id+".o" );
                assure_file( file );

              if(file_size(file)!=-1)  {

                      new_book=new("/clone/misc/save_book");
                          new_book->set_owner(arthur_id);

                           real_book = new_book->get_new_book();

                          if( !objectp(real_book) )continue;

                        time_lable=query("time_stamp", real_book);
                        // if this time_stamp is not the same as something in invertory then get it
                        // if there are already 30 books in his inventory, don't create anymore
                        if ( member_array(time_lable, time_list) == -1 && k<400) {
                                  set("can_sell_book", 1, real_book);
                                real_book->move(this_object());
                        }
                        else {
                                destruct(real_book);
                        }
                }
      destruct(new_book);
                }
        }
   }

   remove_call_out("check_book");
   call_out("check_book", call_time+random(3) );

}

int ask_book()
{
   object me, new_book;
   string file, arthur_id;
   me=this_player();

   arthur_id=query("id", me);
   file = query_book_file( arthur_id+".o" );
   assure_file( file );

   if(file_size(file)!=-1)  {
          new_book=new("/clone/misc/save_book");
          new_book->set_owner(arthur_id);
                  new_book->pay_player_profit();
   }
   else {
        return notify_fail("你還未刊行出一本書，就想要錢？\n");
   }

   destruct(new_book);
   return 1;
}



void clear_book() 
{

   string *dir_list;
   string file, arthur_id; 
   object new_book, *inv, temp_book;
   mixed *file_list;
   int i, j, k, l;

   dir_list = explode("a b c d e f g h i j k l m n o p q r s t u v w x y z", " ");
   for (i=0; i<26; i++) {
      file_list = get_dir(DATA_DIR + "book/" + dir_list[i] + "/");
      if (!sizeof(file_list)) {
             // do nothing here
      }
      else {
         k = sizeof(file_list);
                 for (j=0; j<k; j++) {
            sscanf(file_list[j], "%s.o", arthur_id);
            file = query_book_file( arthur_id+".o" );
            assure_file( file );

            if(file_size(file)!=-1)  {
               new_book=new("/clone/misc/save_book");
               new_book->set_owner(arthur_id);
                           new_book->clear_book();
                        }
                 }
      }
   }
   destruct(new_book);
   return;
}
