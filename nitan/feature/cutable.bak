// cutable.c

#include <ansi.h>

#define LEVEL           0
#define UNIT            1
#define NAME            2
#define NAME_LEFT       3
#define ID_LEFT         4
#define ASS_PART        5
#define VERB            6
#define CLONE           7

#define NOT_INCLUDE_THIS_PART   0
#define INCLUDE_THIS_PART       1

int is_cutable() { return 1; }

void include_part(object ob, string id, mixed *in_part, int include_this_part);

string *query_exclude_part() { return ({ }); }

int do_cut(object me, string arg)
{
        string *exist;
        string *cut;
        mapping parts;
        mixed *part;
        string default_clone;
        string msg;
        object weapon;
        object ob;

        if (! arg)
                return notify_fail("你要割下什麼部位？\n");

        if (! mapp(parts = query("parts")))
                return notify_fail("看來你是割不下來什麼東西了。\n");

        exist = keys(parts);
        exist -= query_exclude_part();
        cut = query("been_cut");
        if (! cut) cut = ({ });

        if (arg == "?")
        {
                int i;
                int count;
                count = 0;
                msg = this_object()->name() + "有以下部位可以割下來。\n";
                for (i = 0; i < sizeof(exist); i++)
                {
                        if (member_array(exist[i], cut) != -1 ||
                            query("no_cut/" + exist[i]))
                                continue;
                        count++;
                        msg += sprintf("%-20s(%s)\n",
                                       parts[exist[i]][NAME], exist[i]);
                }
                if (! count)
                        msg = this_object()->name() + "已經沒什麼可以下刀的地方了。\n";
                write(msg);
                return 1;
        }

        part = parts[arg];
        if (! arrayp(part))
                return notify_fail("你怎麼也找不到你想割的部位。\n");

        if (member_array(arg, cut) != -1)
                return notify_fail(part[NAME] + "已經被割走了。\n");

        if (msg = query("no_cut/" + arg))
                return notify_fail(msg ? msg : "這樣東西你割不下來。\n");

        if (time() < (int)query("who_get/time") &&
            query("id", me) != (string)query("who_get/id"))
                return notify_fail("你還是稍等片刻再割吧。\n");

        default_clone = query("default_clone");
        if (weapon = query_temp("weapon", me))
        {
                if (query("skill_type", weapon) == "pin")
                {
                        if (me->query_skill("sword") < 100)
                                return notify_fail("你現在的修為尚且無法用針進行切割。\n");
                        else
                                msg = WHT "$N" WHT "輕彈出手中" + weapon->name() +
                                      WHT "，勾勒出一道絢麗的弧芒，將$n" WHT "的" +
                                      part[NAME] + WHT "割了下來。\n" NOR;
                } else
                if (query("skill_type", weapon) == "hammer")
                {
                        if (me->query_skill("hammer") < 100)
                                return notify_fail("你現在的錘法修為尚且無法進行切割。\n");
                        else
                                msg = WHT "$N" WHT "驀地揮動" + weapon->name() +
                                      WHT "，聽得「□咚」一聲悶響，已將$n" WHT "的"
                                      + part[NAME] + WHT "砸了下來。\n" NOR;
                } else
                if (query("skill_type", weapon) == "staff")
                {
                        if (me->query_skill("staff") < 100)
                                return notify_fail("你現在的杖法修為尚且無法進行切割。\n");
                        else
                                msg = WHT "$N" WHT "反轉過手中" + weapon->name() +
                                      WHT "，只聽「嗤啦」一聲，已將" + part[NAME] +
                                      WHT "從$n" WHT "上割了下來。\n" NOR;
                } else
                if (query("skill_type", weapon) == "club")
                {
                        if (me->query_skill("club") < 100)
                                return notify_fail("你現在的棍法修為尚且無法進行切割。\n");
                        else
                                msg = WHT "$N" WHT "高舉過手中" + weapon->name() +
                                      WHT "凌空劈下，隨著「噗嗤」一聲，已將" +
                                      part[NAME] + WHT "從$n" WHT "上劈了下來。\n" NOR;
                } else
                if (query("skill_type", weapon) == "whip")
                {
                        if (me->query_skill("whip", 1) < 100)
                                return notify_fail("你現在的鞭法修為尚且無法進行切割。\n");
                        else
                                msg = WHT "$N" WHT "一振手中" + weapon->name() +
                                      WHT "，頓時只聽「□」的一聲脆響，已將$n" WHT
                                      "的" + part[NAME] + WHT "卷了下來。\n" NOR;
                } else
                msg = WHT "$N" WHT "提起手中" + weapon->name() +
                      WHT "「嗤」的一聲便將$n" WHT "的" + part[NAME] +
                      (stringp(part[VERB]) ? part[VERB] : WHT "割了下") +
                      WHT "來。\n" NOR;
        } else
        if (me->query_skill("force") < 90)
        {
                message_vision(WHT "$N" WHT "舉起手來，對著$n" WHT "的" +
                               part[NAME] + WHT "一掌砍了下去，結果被震"
                               "的「哇哇」怪叫了兩聲。\n" NOR, me, this_object());

                write(HIY "好好練練內功再來吧。\n" NOR);
                return 1;
        } else
                msg = WHT "$N" WHT "舉起手來，一下子就把$n" WHT "的" + part[NAME] +
                      WHT "給" + (stringp(part[VERB]) ? part[VERB] : "切了下") +
                      WHT "來。\n" NOR;

        message_vision(msg, me, this_object());

        // 割了頭的屍體取消掉戶主
        if (arg == "head")
                delete("defeated_by", this_object());

        ob = new(stringp(part[CLONE]) ? part[CLONE] : default_clone);
        ob->set_name(stringp(part[NAME_LEFT]) ? part[NAME_LEFT] : part[NAME],
                     ({ stringp(part[ID_LEFT]) ? part[ID_LEFT] : arg }));
        set("unit", part[UNIT], ob);
        set("long", "這是一" + part[UNIT] + "被人割下來的" + ob->name() + "。\n", ob);
        set("default_clone", default_clone, ob);
        set("main_part_level", part[LEVEL] + 1, ob);

        if (ob->is_cutable())
                set("been_cut", ({ }), ob);

        ob->set_from(this_object());

        if (query("env/auto_get", me))
        {
                message_vision("$N揀起一" + query("unit", ob) +
                               ob->name() + "。\n", me);
                ob->move(me, 1);
        } else
                ob->move(environment());

        // seperate the part cut
        cut += ({ arg });
        set("been_cut", cut);

        // seperate the association part
        include_part(ob, arg, 0, NOT_INCLUDE_THIS_PART);
        return 1;
}

string extra_desc()
{
        string msg;
        string *cut;
        mixed *part;
        int flag;
        int i;

        msg = "";
        if (! arrayp(cut = query("been_cut")))
                return msg;
        flag = 0;
        for (i = 0; i < sizeof(cut); i++)
        {
                part = query("parts/" + cut[i]);
                if (part[LEVEL] > query("main_part_level"))
                        continue;
                if (! flag)
                {
                        msg += "不過它的" + part[NAME];
                        flag++;
                } else
                        msg += "、" + part[NAME];
        }
        if (flag) msg += "已經不見了。\n";
        return msg;
}

void include_part(object ob, string id, mixed *in_part, int include_this_part)
{
        string *cut;
        string *ass;
        mixed  *srcpart;
        mixed  *part;
        string new_id;
        mapping assmap;
        int i;

        srcpart = query("parts/" + id);
        if (! arrayp(srcpart))
                return;
        part = allocate(sizeof(srcpart));
        for (i = 0; i < sizeof(srcpart); i++)
                part[i] = srcpart[i];
        part[ASS_PART] = allocate_mapping(sizeof(srcpart[ASS_PART]));
        if (include_this_part)
        {
                part[NAME] = part[NAME_LEFT];
                new_id = in_part[ASS_PART][id];
                set("parts/" + new_id, part, ob);
                if (member_array(id, cut = query("been_cut")) != -1)
                        set("been_cut", query("been_cut", ob) + ({ new_id }), ob);
                set("been_cut", cut + ({ id }));
        }

        if (mapp(assmap = srcpart[ASS_PART]))
        {
                // set the association part
                ass = keys(assmap);
                for (i = 0; i < sizeof(ass); i++)
                {
                        include_part(ob, ass[i], srcpart, INCLUDE_THIS_PART);
                        new_id = assmap[ass[i]];
                        part[ASS_PART][new_id] = new_id;
                        if (query("no_cut/" + ass[i]))
                                set("no_cut/" + new_id, query("no_cut/" + ass[i], this_object()), ob);
                }
        }
}
