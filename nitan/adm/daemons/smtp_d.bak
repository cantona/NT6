/**************************
 *                        *
 * /adm/daemons/smtp_d.c  *
 *                        *
 * by Find@TX.            *
 *                        *
 **************************/

#include <net/socket.h>
#include <login.h>
#include <ansi.h>
#include <origin.h>

#define RANDOM_PWD_LEN                8 /* 隨機密碼長度 */

class email
{
        string rcpt;        // 收件者地址
        string body;        // 內容
        int status;        // 狀態碼
        string id;        // 用戶 ID
        string passwd;        // 密碼
        object user;
        int normal;
}

protected void write_callback(int fd,string outgoing);
protected varargs void write_callback(int fd,string outgoing);
protected void close_callback(int fd);

protected int mail_have_reg(object user,string mail);
string random_passwd(int len);

protected mixed content = ([]);

protected string mailname = "mud",mailpasswd = "123";
protected string domain_name = "mail.263.net.cn",address = "210.78.128.66";

protected void resolve_callback( string o_address, string resolved, int key )
{
        if( stringp(resolved) && (resolved != "") && (address != resolved) )
        {
                address = resolved;
                log_file("smtp",sprintf("SMTP: Remote SMPT server's ip change to %s\n",address));
        }
}

void update_mail_server_ip()
{
        if(previous_object() && (geteuid(previous_object()) != ROOT_UID))
                return;
        //resolve( domain_name, "resolve_callback" );
}

protected void create()
{
        seteuid(getuid());
        //resolve( domain_name, "resolve_callback" );
}

nomask void send_mail(object user,string mail)
{
        object link;
        string msg,passwd,server,lhalf,rhalf;
        int s,err;
        class email newmail;

#ifndef MAIL_REG
        return;
#endif

        if(!user) return;
        if(!stringp(mail) || mail == "") return;

        mail = lower_case(mail);

        if(!objectp(link = user->query_temp("link_ob")))
        {
                tell_object(user,"您的檔案不完全,無法進行注冊,請重新連線完成注冊.\n\n");
                destruct(user);
                return;
        }

        if( (sscanf(mail,"%s@%s",lhalf,rhalf) != 2)
        || (lhalf == "")
        || (rhalf == "") )
        {
                write(sprintf("你的電子郵件地址：%s 格式不正確，\n請認真檢查後重新注冊。\n",mail));
                return;
        }

        if(!regexp(mail, "^[a-zA-Z0-9_.@-]+$"))
        {
                write(sprintf("你的電子郵件地址：%s 裡包含非法字符，\n請認真檢查後重新注冊。\n",mail));
                return;
        }

        if(mail_have_reg(user,mail))
                return;

        passwd = random_passwd(RANDOM_PWD_LEN);
        server = sprintf("%s 25",address);

        msg = sprintf("From: \"%s\" <%s>\nTo: %s\nSubject: 電子郵件確認函\n\n",
        MUD_NAME,PUBLIC_MUD_MAIL,mail);
        msg += sprintf("你好，歡迎光臨"+MUD_NAME+"\n                  柔情與俠義的世界。\n\n您的賬號：%s\n密    碼：%s\n",user->query("id"),passwd);
        msg += "\n注意：這個賬號目前為臨時賬號，請您于48小時之內登陸確認。\n";
        msg +=   "      過期未登陸將會被自動刪除。\n";
        msg +=   "      如有注冊登陸方面的問題可以與 "+ PUBLIC_MUD_MAIL+" 聯系。\n";
        msg += "\n      遊戲的主頁在 http://www.mudtx.com/ 那裡有詳細的幫助
      和玩家寫的新手指南、經驗介紹，相信會對你很有用處。

      注意：密碼為 8 位，一位字母間隔一位數字，
            1,3,5,7 位是字母，2,4,6,8 位是數字，
            保險的方法是用拷貝、粘貼來輸入密碼。

                 祝您在《天下》玩的愉快！";

        newmail = new(class email);
        newmail->rcpt = mail;
        newmail->body = msg;
        newmail->id = user->query("id");
        newmail->passwd = passwd;
        newmail->user = user;
        user->start_busy(100);

        s = socket_create(STREAM,"read_callback", "close_callback");
        if(s<0)
        {
                log_file("socket","Socket create err: "+socket_error(s)+"\n");
                tell_object(user,"注冊過程中服務器發生錯誤，請再注冊一次。\n");
                return;
        }

        content += ([ s : newmail ]);

        err = socket_connect(s,server,"read_callback", "write_call_back");
        if(err<0)
        {
                log_file("socket","Socket connect err: "+socket_error(err)+"\n");
                tell_object(user,"注冊過程中服務器發生錯誤，請再注冊一次。\n");
                socket_close(s);
                return;
        }

        tell_object(user,"郵件發送中，請稍候。。。。。。\n");
        call_out("time_out",90,s);
}

protected void time_out(int fd)
{
        class email mailmsg;

        if(undefinedp(content[fd]))
                return;

        mailmsg = content[fd];

        if(objectp(mailmsg->user))
        {
                tell_object(mailmsg->user,"\n發送過程超時，請重新再注冊一次。\n\n");
                (mailmsg->user)->stop_busy();
        }

        map_delete(content,fd);
        socket_close(fd);
}

protected void success_register(int fd)
{
        class email mailmsg;
        object usr,link;

        if(undefinedp(content[fd]))
                return;

        mailmsg = content[fd];
        if(!objectp(usr = mailmsg->user))
                return;
        if(!objectp(link = usr->query_temp("link_ob")))
                return;

        newbie_reg(mailmsg->id, mailmsg->rcpt);

        usr->stop_busy();

        map_delete(content,fd);

        tell_object(usr,sprintf("\n給您分配的隨機密碼已根據您登記的地址發往：%s
請您五分鐘後檢查您的郵箱。如果您在24小時後還未能收到我們
給您發出的郵件，請您向 %s 發信說明詳細情況，
我們會盡快為您解決。不便之處請多諒解。
祝您在 %s 玩的愉快，再見！\n\n\n",mailmsg->rcpt,PUBLIC_MUD_MAIL,MUD_NAME));

        link->set("last_on", time());
        link->set("last_from", query_ip_name(usr));
        link->set("email",mailmsg->rcpt);
        link->set("password",crypt(mailmsg->passwd,0));
        usr->set("email",mailmsg->rcpt);
        usr->set("have_reg",1);
        usr->delete("new_begin");
        link->save();
        usr->save();

        tell_room(environment(usr),"你只覺得眼前一花，"+usr->query("name")+"不見了。\n",({usr}));
        message("channel:sys",sprintf(HIR"【郵件注冊精靈】：%s(%s)完成注冊退出遊戲。\n"NOR,
                usr->name(),geteuid(usr)),filter_array(users(),(: wizardp($1) :)));

        destruct(link);
        destruct(usr);
}

protected void close_callback(int fd)
{
        socket_close(fd);
}

protected void mail_error(int fd,string message)
{
        class email mailmsg;

        mailmsg = content[fd];

        log_file("smtp_err",sprintf("ERROR:\n%s\nid: %s\nmail: %s\n\n",
                        message,mailmsg->id,mailmsg->rcpt));

        if(objectp(mailmsg->user))
        {
                tell_object(mailmsg->user,sprintf("\n發送過程中出現異常錯誤：\n%s\n請重新再注冊一次。\n\n",
                        message));
                (mailmsg->user)->stop_busy();
        }

        map_delete(content,fd);
        socket_close(fd);
}

protected void read_callback(int fd,string message)
{
        int rcode,err;
        string mechanism;
        class email mailmsg;

        if(undefinedp(content[fd]))
        {
                socket_close(fd);
                return;
        }

        if(sizeof(message) < 3)
                return;

        mailmsg = content[fd];

        rcode = atoi(message[0..2]);

        if(!rcode || (rcode > 502))
        {
                mail_error(fd,message);
                return;
        }

        if(!mailmsg->status)  // 握手連通
        {
                socket_write(fd,sprintf("EHLO %s\r\n",query_host_name()));
                mailmsg->status++;
                return;
        }

        if(mailmsg->status == 1) // server ready
        {
                if((rcode == 500) || (rcode == 502))        // command not recognized
                {
                        if(mailmsg->normal)
                        {
                                mail_error(fd,message);
                                return;
                        }

                        socket_write(fd,sprintf("HELO %s\r\n",query_host_name()));
                        mailmsg->normal = 1;
                        return;
                }

                if(mailmsg->normal)
                {
                        // Modified
                        //socket_write(fd,sprintf("MAIL FROM: <%s>\r\n",PUBLIC_MUD_MAIL));
                        socket_write(fd,sprintf("MAIL FROM: <%s>\r\n","mud@mail.263.net.cn"));

                        mailmsg->status = 3;
                        return;
                }

                if(sscanf(message,"%*sAUTH=%s\n%*s",mechanism) == 3)
                {
                //        socket_write(fd,sprintf("AUTH %s\r\n",mechanism));
                        socket_write(fd,"AUTH LOGIN\r\n");
                        mailmsg->status = 2;
                        return;
                }

                // ESMTP 不需要認証
                socket_write(fd,sprintf("MAIL FROM: <%s>\r\n","mud@mail.263.net.cn"));
//                socket_write(fd,sprintf("MAIL FROM: <%s>\r\n",PUBLIC_MUD_MAIL));
                mailmsg->status = 3;
                return;
        }

        if(mailmsg->status == 2)        // Authentication
        {
                string quest;

                if(rcode == 334)        // 認証提問
                {
                        quest = message[4..];
                        quest = replace_string(quest,"\n","");
                        quest = replace_string(quest,"\r","");
                        quest = base64_decode(quest);
                        if(quest[0..3] == "User")
                        {
                                socket_write(fd,sprintf("%s\r\n",base64_encode(mailname)));
                                return;
                        }
                        else if(quest[0..3] == "Pass")
                        {
                                socket_write(fd,sprintf("%s\r\n",base64_encode(mailpasswd)));
                                return;
                        }
                }

                // 認証通過
                socket_write(fd,sprintf("MAIL FROM: <%s>\r\n","mud@mail.263.net.cn"));
//                socket_write(fd,sprintf("MAIL FROM: <%s>\r\n",PUBLIC_MUD_MAIL));
                mailmsg->status = 3;
                return;
        }

        if(mailmsg->status == 3)
        {
                socket_write(fd,sprintf("RCPT TO: <%s>\r\n",mailmsg->rcpt));
                mailmsg->status = 4;
                return;
        }

        if(mailmsg->status == 4)
        {
                socket_write(fd,sprintf("DATA\r\n"));
                mailmsg->status = 5;
                return;
        }

        if(mailmsg->status == 5)
        {
                if(rcode == 354)        // ready receive data
                {
                        err = socket_write(fd,sprintf("%s\r\n.\r\n",mailmsg->body));
                        if( (err < 0) && (err != EEALREADY) )
                                call_out("write_callback",1,fd,sprintf("%s\r\n.\r\n",mailmsg->body));
                        mailmsg->status = 6;
                        return;
                }
                else
                {
                        mail_error(fd,message);
                        return;
                }
        }

        if(mailmsg->status == 6)
        {
                socket_write(fd,sprintf("QUIT\r\n"));
                mailmsg->status = 7;
                return;
        }

        if((mailmsg->status == 7) && (rcode == 221))
        {
                success_register(fd);
                return;
        }

        mail_error(fd,message);
}

protected varargs void write_callback(int fd,string outgoing)
{
        int err;

        if(stringp(outgoing) && (outgoing != ""))
        {
                err = socket_write(fd,outgoing);

                if( (err < 0) && (err != EEALREADY) )
                {
                        call_out("write_callback",1,fd,outgoing);
                        return;
                }
        }
}

/* 以後要加入對某類 mail 地址的限制，也在這裡實現。*/
protected int mail_have_reg(object user,string mail)
{
        object link;
        string id;

        if(!user) return 1;
        link = user->query_temp("link_ob");
        if(!link) return 1;
        if(!stringp(mail)) return 1;

        id = user->query("id");

        if(!permit_reg_email(mail))
        {
                tell_object(user,"這個郵件地址已經注冊過了，本遊戲不允許同一地址多重注冊。\n再見！\n");
                del_user_data(id,2);
                message("channel:sys",sprintf(HIR"【郵件注冊精靈】：%s(%s)注冊請求被拒絕，退出遊戲。\n"NOR,
                        user->name(),geteuid(user)),filter_array(users(),(: wizardp($1) :)));

                destruct(user);
                destruct(link);
                rm(DATA_DIR + "login/" + id[0..0] + "/" + id + ".o");
                rm(DATA_DIR + "user/"  + id[0..0] + "/" + id + ".o");
                return 1;
        }

        else
                return 0;
}

/* 超過48小時未連線確認刪除檔案 */
void user_no_login()
{
        string *player,time;
        object user,link;

#ifndef MAIL_REG
        return;
#endif

        if(find_object(PAIMING_D) && PAIMING_D->query_is_sorting())
        {
                log_file("smtp","SYSTEM: Is paiming.\n");
                        return;
        }

        player = query_exceed_reg_time();
        if(!player || !sizeof(player))
                return;

        time = ctime(time());

        foreach(string one in player)
        {
                string f;

                if(objectp(user = find_player(one)))
                {
                        if(objectp(link = user->query("link_ob")))
                                destruct(link);
                        destruct(user);
                }

                if(file_size(f = sprintf(DATA_DIR+"login/%c/%s.o",one[0],one)) > 0)
                        rm(f);
                if(file_size(f = sprintf(DATA_DIR+"user/%c/%s.o",one[0],one)) > 0)
                        rm(f);
                log_file("smtp",sprintf("(%s)超過48小時未連線確認被刪除。%s\n",one,time));
        }
}
/*
string random_passwd(int len)
{
        int cap,low,num,n;
        string passwd;
        string Random_Passwd ="ABCDEFGHIJKL1234567890mnopqrstuvwxyzabcdefghi1jkl9MNOPQRS4TUVW9XYZ";

        if(!intp(len))
                return "12345";

        if(len < 4 || len > 8)
                len = 8;

        do
        {
                cap=0; low=0; num=0; passwd = "";
                for(int i=0;i<len;i++)
                {
                        n = random(sizeof(Random_Passwd));
                        if( Random_Passwd[n] <='Z' && Random_Passwd[n] >='A' )
                                cap++;
                        else if( Random_Passwd[n] <='z' && Random_Passwd[n] >='a' )
                                low++;
                        else if( Random_Passwd[n] <='9' && Random_Passwd[n] >='0' )
                                num++;
                        passwd += Random_Passwd[n..n];
                }
        }
        while(!cap || !low || !num);

        return passwd;
}
*/

string random_passwd(int len)
{
        string letters = "QAZWSXEDCRFVTGBYHNUJMIKLOPpolikujmyhntgbrfvedcwsxqaz";
        string passwd = "";

        if(len < 4 || len > 8)
                len = 8;

        for(int i=0;i<len;i++)
                if(!(i%2))
                        passwd += sprintf("%c", letters[random(52)]);
                else
                        passwd += sprintf("%d", random(10));

        return passwd;
}
