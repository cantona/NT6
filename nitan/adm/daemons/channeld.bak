// This program is a part of NT MudLIB
// channeld.c
// Written by Lonely@nitan.org

// 對于參數的解釋
// msg_speak   標準說話的題頭
// msg_emote   動作說話的提頭，不定義則表示不能用動作
// msg_color   頻道的顏色
// name        頻道的名稱
// only        指定接受信息的玩家類型
//             sys    :  系統可以使用的，玩家都可以看到，但玩家不可以使用
//             wiz    :  app以上可以使用及看到
//             arch   :  arch以上可以使用及看到
//             party  :  幫派內部使用及看到（巫師和指定可以收看所有頻道的ID可以看到）
//             family :  門派內部使用及看到（巫師和指定可以收看所有頻道的ID可以看到）
//             league :  同盟派內部使用及看到（巫師和指定可以收看所有頻道的ID可以看到）
// name_raw    設置為1的話，該頻道在玩家戴面具後仍然取其真實姓名
// need_age    設置為1的話，該頻道在玩家18歲之前無法使用
// omit_log    設置為1的話，不記錄聊天記錄
// filter      指定條件的接收類型
// for_listen  玩家只可以看到而不可以使用

#pragma optimize
#pragma save_binary

#include <ansi.h>
#include <mudlib.h>
#include <net/dns.h>
#include <net/macros.h>
#include <localtime.h>

inherit F_DBASE;

#define ALLOW_LIST ({ })
#define SPECIAL_NPC     ({ "/adm/npc/youxun" })

#define REMOTE_Q    "/adm/daemons/network/services/remote_q.c"

string remove_addresses(string, int all);
int filter_listener(object ppl, string only, object me);
protected int check_bad_words(object user, string msg);

nosave string msg_log;
nosave int log_from;

string *bad_words = ({
       "日你", "操你", "幹你", "日死", "操死", "幹死", "狗日", "日出來",
       "ri你", "cao你", "gan你", "ri死", "cao死", "gan死", "狗ri", "ri出來",
       "我操", "fuck", "雞巴", "肛門", "性交", "畜生", "強姦",
       "肛交", "法輪功","插死", "幹出來", "gan出來", "狗娘", "雜種", "自慰",
       "母狗", "祖宗十八", "媽的個逼","媽的逼", "媽個逼",
       "媽逼", "逼養的", "小逼", "媽的個b", "媽的b", "媽個b", "媽b", "騷貨",
       "b養的", "你媽生", "陰道", "陰戶", "陰蒂", "陰莖", "龜頭",
       "卵蛋", "狗娘", "烏龜王八", "傻逼", "傻b", "sb", "做愛", "意淫",
       "輪姦", "雜交", "媽媽的", "bitch", "性愛", "□", "□", "妣",
       "□", "尻", "□", "吊你", "弓雖女幹"
});

string query_msg_log() { return msg_log; }

mapping channels = ([
        "sys":  ([      "msg_speak": HIR "【系統報告】%s：%s\n" NOR,
                        "msg_emote": HIR "【系統報告】%s" NOR,
                        "msg_color": HIR,
                        "only"     : "imm",
                        "name"     : "系統",
                        "omit_log" : 1,
                        "name_raw" : 1,
                ]),

        "wiz":  ([      "msg_speak": HIG "【巫師頻道】%s：%s\n" NOR,
                        "msg_emote": HIG "【巫師頻道】%s" NOR,
                        "msg_color": HIG,
                        "name"     : "巫師",
                        "only"     : "imm",
                        "intermud" : GCHANNEL,
                        "intermud_emote"   : 1,
                        "intermud_channel" : "wiz",
                        "omit_address": 0,
                        "omit_log" : 1,
                        "name_raw" : 1,
                        "filter"   : (: $1["MUDLIB"] == MUDLIB_NAME :)
                ]),

        "gwiz": ([      "msg_speak": HIG "【網際巫師】%s：%s\n" NOR,
                        "msg_emote": HIG "【網際巫師】%s" NOR,
                        "msg_color": HIG,
                        "name"     : "交流",
                        "only"     : "imm",
                        "intermud" : GCHANNEL,
                        "intermud_emote"   : 1,
                        "intermud_channel" : "gwiz",
                        "omit_address"     : 0,
                        "omit_log" : 1,
                        "name_raw" : 1,
                        //"filter"   : 1,
                ]),

        "debug":([      "msg_speak": HIW "【調試信息】%s：%s\n" NOR,
                        "msg_emote": HIW "【調試信息】%s" NOR,
                        "msg_color": HIW,
                        "name"     : "調試",
                        "only"     : "wiz",
                        "omit_log" : 1,
                        "name_raw" : 1,
                ]),

        "war": ([       "msg_speak": HIR "【戰爭頻道】%s：%s\n" NOR,
                        "msg_emote": HIR "【戰爭頻道】%s" NOR,
                        "msg_color": HIR,
                        "name"     : "任務",
                        //"only"     : "npc",
                        "omit_log" : 1,
                        "name_raw" : 1,
                ]),

        "inter":([      "msg_speak": HIR "【同盟交談】%s：%s\n" NOR,
                        "msg_emote": HIR "【同盟交談】%s" NOR,
                        "msg_color": HIR,
                        "only"     : "league",
                        "name_raw" : 1,
                        "name"     : "同盟",
                        "omit_log" : 1,
                ]),

        "chat": ([      "msg_speak": HIC "【論道江湖】%s：%s\n" NOR,
                        "msg_emote": HIC "【論道江湖】%s" NOR,
                        "msg_color": HIC,
                        "name"     : "閒聊",
                ]),

        "new": ([       "msg_speak": HIC+"【"+HIW+"初入江湖"+HIC+"】%s：%s\n" NOR,
                        "msg_emote": CYN+"【"+HIY+"初入江湖"+CYN+"】"+HIC+"%s" NOR,
                        "msg_color": NOR+HIC,
                        "name"     : "新手",

                ]),

        "rumor":([      "msg_speak": HIM "【謠言四起】%s：%s\n" NOR,
                        "msg_emote": HIM "【謠言四起】%s" NOR,
                        "msg_color": HIM,
                        "name"     : "謠言",
                        "anonymous": "某人",
                ]),

        "ultra": ([     "msg_speak": HIW "【大 宗 師】%s：%s\n" NOR,
                        "msg_emote": HIW "【大 宗 師】%s" NOR,
                        "msg_color": HIW,
                        "name"     : "大宗師",
                        "intermud" : GCHANNEL,
                        "intermud_emote"    : 1,
                        "intermud_channel"  : "rultra",
                        "filter"   : (: $1["MUDLIB"] == MUDLIB_NAME :)
                ]),

        "info": ([      "msg_speak": WHT "【信息頻道】%s：%s\n" NOR,
                        "msg_color": WHT,
                        "name"     : "信息",
                        //"only"     : "sys",
                        "omit_log" : 1,
                        "for_listen": 1,
                ]),

        "shout":([      "msg_speak": HIW "%s縱聲長嘯：%s\n" NOR,
                ]),

        "sing":  ([     "msg_speak": CYN "【歡歌笑語】%s唱著：%s\n" NOR,
                        "msg_color": CYN,
                        "name"     : "歌唱",
                 ]),
        "stock":([      "msg_speak": RED "【股票頻道】%s：%s\n" NOR,
                        "msg_color": RED,
                        "name"     : "股票",
                        //"only"     : "sys",
                        "omit_log" : 1,
                        "for_listen": 1,
                ]),

        "sos":  ([      "msg_speak": HIG "【江湖告急】%s：%s\n" NOR,
                        "msg_color": HIG,
                        "name_raw" : 1,
                        "name"     : "求助",
                ]),

        "family":([     "msg_speak": HIG "【同門話語】%s：%s\n" NOR,
                        "msg_emote": HIG "【同門話語】%s" NOR,
                        "msg_color": HIG,
                        "only"     : "family",
                        "name"     : "同門",
                        "omit_log" : 1,
                ]),

        "party":([      "msg_speak": HIG "【本幫話語】%s：%s\n" NOR,
                        "msg_emote": HIG "【本幫話語】%s" NOR,
                        "msg_color": HIG,
                        "only"     : "party",
                        "name"     : "幫派",
                        "omit_log" : 1,
                ]),

        "bt":([         "msg_speak": HIG "【戰場話語】%s：%s\n" NOR,
                        "msg_emote": HIG "【戰場話語】%s" NOR,
                        "msg_color": HIG,
                        "only"     : "bt",
                        "name"     : "戰場",
                        "omit_log" : 1,
                ]),
                
        "rultra":([     "msg_speak": WHT "【塞外宗師】%s：%s\n" NOR,
                        "msg_emote": WHT "【塞外宗師】%s" NOR,
                        "msg_color": WHT,
                        "name"     : "塞外宗師",
                        "for_listen": 1,
                ]),

        "nt":   ([      "msg_speak": HIC "【異域傳聞】%s：%s\n" NOR,
                        "msg_emote": HIC "【異域傳聞】%s" NOR,
                        "msg_color": HIC,
                        "intermud" : GCHANNEL,
                        "intermud_emote"   : 1,
                        "intermud_channel" : "nt",
                        "name"     : "異域",
                        "name_raw" : 1,
                        "filter"   : (: $1["MUDLIB"] == MUDLIB_NAME :)
                ]),

        "es":   ([      "msg_speak": HIC "【網際傳情】%s：%s\n" NOR,
                        "msg_emote": HIC "【網際傳情】%s" NOR,
                        "msg_color": HIC,
                        "intermud" : GCHANNEL,
                        "intermud_emote"   : 1,
                        "intermud_channel" : "es",
                        "name"     : "網際",
                        //"filter"   : 1,
                        // "need_age" : 1,
                        "name_raw" : 1,
                        "omit_address"     : 0,
                 ]),

        "bill":  ([     "msg_speak": HIY "【交易頻道】%s：%s\n" NOR,
                        "msg_color": HIY,
                        "name"     : "交易",
                        "name_raw" : 1,
                        "omit_log" : 1,
                 ]),

]);

void create()
{
        // This is required to pass intermud access check.
        seteuid(getuid());
        set("channel_id", "頻道精靈");
}

mapping query_chann() {        return channels; }

void channel_log(string msg, string verb, object user)
{
        string lfn;
        mixed lt;
        int t;

        if( !mapp(channels[verb]) || !objectp(user) || !userp(user) )
                return;

        if( channels[verb]["omit_log"] )
                return;

        if( !stringp(msg_log) ) msg_log = "";

        t = time();
        msg_log += sprintf(" %s(%s) on %s\n%s",
                           user->name(1),query("id", user),log_time(),filter_color(msg));
        if( strlen(msg_log) > 8000 || t - log_from > 900 ) {
                lt = localtime(t);

                lfn = sprintf("channel/%d-%d-%d", lt[LT_YEAR],
                              lt[LT_MON] + 1, lt[LT_MDAY]);
                assure_file(LOG_DIR + lfn);
                log_file(lfn, msg_log);
                msg_log = "";
                log_from = t;
        }
}

// 接收REMOTE_Q返回來的信息並顯示之
void do_remote_channel(object me, string verb, string arg)
{
        object *obs;
        string msg;

        if( undefinedp(channels[verb]) || !userp(me) )
                return;

        // Ok, I will direct send the message to those people listening us.
        obs = all_interactive();
        if( stringp(channels[verb]["only"]) )
                obs = filter_array(obs, (: filter_listener :),
                                   channels[verb]["only"], me);

        msg = sprintf(channels[verb]["msg_emote"], arg);
        message("channel:" + verb, msg, obs);
        channel_log(msg, verb, me);
        obs->add_msg_log(verb, msg + "\n");

        // 向各個站點發送EMOTE信息
        channels[verb]["intermud"]->send_msg(channels[verb]["intermud_channel"],
                                             query("id", me),me->name(1),
                                             arg, 1,
                                             channels[verb]["filter"]);
}


varargs int do_channel(object me, string verb, string arg, int emote)
{
        object *obs;
        string *tuned_ch, who;
        int is_player, myemote;
        string imsg = 0, local;
        string msg;
        object *tobs;
        object tplayer;
        object *pobs;

        string bt;
        string party;
        string family;
        string fname;

        string self_emote;

        self_emote = arg;

        // Check if this is a channel emote.
        if( sizeof(verb) > 2 ) {
                if( verb[sizeof(verb)-1] == '*' ) {
                        emote = 1;
                        verb = verb[0..<2];
                } else
                if( verb[sizeof(verb)-1] == '#' ) {
                        myemote = 1;
                        verb = verb[0..<2];
                }
        }

        if( !wizardp(me) && arg && strlen(arg) > 350 ) {
                CHANNEL_D->do_channel(this_object(),"sys",query("name", me)+"("+query("id", me)+")企圖Flood毀壞公共頻道！\n");
                return 1;
        }

        // Check if this is a channel messsage.
        if( !mapp(channels) || undefinedp(channels[verb]) ) return 0;

        if( me->is_chatter() )
                return notify_fail("聊天魂魄目前不能使用各種頻道。\n");

        is_player = playerp(me);
        if( is_player && ! wizardp(me) ) {
//if( !query("registered", me) )
//                        return notify_fail("你必須在注冊以後才能夠使用各種頻道。\n");

//query("mud_age", if( me)1800 && me-query("monfee")<11 )
//                        return notify_fail("你必須在完成注冊五分鐘以後才能使用頻道，這段"
//                                           "時間內請先閱讀幫助(help newbie)。\n")

                if( channels[verb]["need_age"] && query("age", me)<18 )
                        return notify_fail("你必須成年以後才能使用" + channels[verb]["name"] +
                                           "頻道。\n");
        }

        //now we can be sure it's indeed a channel message:
        if( !stringp(arg) || arg == "" || arg == " " )
                arg = "...";

        if( ultrap(me) ) {
                if( verb == "chat" && ! query("env/no_autoultra", me) )
                        verb = "ultra";
        } else
                if( is_player && verb == "ultra" )
                        return notify_fail("等你成了大宗師再"
                                           "使用這個頻道吧！\n");

        // player broadcasting need consume jing
        if( playerp(me) && !wizardp(me) && verb == "rumor" &&
            !objectp(present("rumor generator", me)) )
                if( query("jing", me)>50)me->add("jing",-random(36) )
                        ; else
                return notify_fail("你已經沒力氣散播謠言了！\n");

        if( playerp(me) && me->ban_say(1) ) return 0;

        // check if rumor or chat is blocked
        if( query("chblk_on", me) )
                return notify_fail("你的聊天頻道給關閉了！唯一的辦法就是請求在線玩家投票開通。\n");

        if( query("doing", me) == "scheme"){
                if( query("jing", me)<100 )
                        return notify_fail("你現在的精神不濟，等一會兒吧。\n");
                addn("jing", -50, me);
        }

        if (me->is_character() && living(me))
        {
                if( time()-query_temp("last_use_channel", me)<4){
                        if( query_temp("last_message", me) == arg )
                                return notify_fail("不要在短期內使用頻道"
                                                   "發布重復的信息。\n");
                        set_temp("last_message", arg, me);
                } else {
                        set_temp("last_message", arg, me);
                        set_temp("last_use_channel", time(), me);
                }

                switch (channels[verb]["only"])
                {
                case "imm":
                        if( wiz_level(me) < 1 )
                                return 0;
                        break;

                case "wiz":
                        if( wiz_level(me) < 3 )
                                return 0;
                        break;

                case "arch":
                        if( wiz_level(me) < 4 )
                                return 0;
                        break;
                case "sys" :
                        if( playerp(me) )
                                return 0;
                        break;

                case "party":
                        if( !(party=query("bunch/bunch_name", me)) )
                                return notify_fail("你還是先加入一個幫派再說吧。\n");

                        if( strlen(party) == 4 ) {
                                party = party[0..1] + " □ " +
                                        party[2..3];
                        }

                        if( strlen(party) == 6 ) {
                                party = party[0..1] + " " +
                                        party[2..3] + " " +
                                        party[4..5];
                        }
                        channels[verb]["msg_speak"] = HIG "【" + party +
                                                      "】%s：%s\n" NOR;
                        channels[verb]["msg_emote"] = HIG "【" + party +
                                                      "】%s" NOR;
                        break;

                case "bt":
                        if( !(bt=query_temp("battle/team_name", me)) )
                                return notify_fail("你還是先參加戰場再說吧。\n");

                        if( strlen(bt) == 4 ) {
                                bt = bt[0..1] + " □ " +
                                     bt[2..3];
                        }

                        if( strlen(bt) == 6 ) {
                                bt = bt[0..1] + " " +
                                     bt[2..3] + " " +
                                     bt[4..5];
                        }
                        channels[verb]["msg_speak"] = HIG "【" + bt +
                                                      "】%s：%s\n" NOR;
                        channels[verb]["msg_emote"] = HIG "【" + bt +
                                                      "】%s" NOR;
                        break;
                        
                case "family":
                        if( !(family=query("family/family_name", me)) )
                                return notify_fail("你還是先加入一個門派再說吧。\n");

                        if( strlen(family) == 4 ) {
                                family = family[0..1] + " □ " +
                                         family[2..3];
                        }

                        if( strlen(family) == 6 ) {
                                family = family[0..1] + " " +
                                         family[2..3] + " " +
                                         family[4..5];
                        }
                        channels[verb]["msg_speak"] = HIG "【" + family +
                                                      "】%s：%s\n" NOR;
                        channels[verb]["msg_emote"] = HIG "【" + family +
                                                      "】%s" NOR;
                        break;
                }
        }

        if( verb == "shout" ) {
                if( !arg ) return notify_fail("你想要大叫什麼？\n");

                if( !wizardp(me) )
                        return notify_fail("你不是巫師，無法喊出那麼大的聲音。\n");

                who = me->name(1) + "[" + query("id", me) + "]";
                msg = sprintf(channels[verb]["msg_speak"], who, arg);
                // msg = HIW + me->name(1) + "縱聲長嘯：" + arg + "\n" + NOR;
                shout(msg);
                write(HIW + "你縱聲長嘯：" + arg + "\n" + NOR);
                channel_log(msg, verb, me);
                users()->add_msg_log(verb, msg + "\n");
                return 1;
        }

        // If we speaks something in this channel, then must tune it in.
        if( playerp(me) ) {
                if( !pointerp(tuned_ch=query("channels", me))){
                        set("channels", ({verb}), me);
                        write("你打開了" + channels[verb]["name"] + "頻道。\n");
                } else
                if( member_array(verb, tuned_ch) == -1 ) {
                        set("channels", tuned_ch+({verb}), me);
                        write("你打開了" + channels[verb]["name"] + "頻道。\n");
                }

                if( channels[verb]["for_listen"] ) {
                        write("這個頻道只能用來聽取信息。\n");
                        return 1;
                }
        }

        // Support of channel emote
        if( emote  && me->is_character() ) {
                string vb, emote_arg, mud;

                if( undefinedp(channels[verb]["msg_emote"]) )
                        return notify_fail("這個頻道不支持表情動詞。\n");

                if( sscanf(arg, "%s %s", vb, emote_arg) != 2 ) {
                        vb = arg;
                        emote_arg = "";
                }

                // internet channel emote
                if( channels[verb]["intermud_emote"] ) {
                        if( sscanf(emote_arg, "%s@%s", emote_arg, mud) == 2 &&
                            htonn(mud) != mud_nname() ) {
                                REMOTE_Q->send_remote_q(mud,verb,query("id", me),emote_arg,vb);
                                write("網路訊息已送出，請稍候。\n");
                                return 1;
                        }

                        local=sprintf("%s(%s@%s)",me->name(1),capitalize(query("id", me)),
                                                     upper_case(MUD_INTERMUD_NAME));
                        imsg = EMOTE_D->do_emote(me, vb, emote_arg, 3, local,
                                                 channels[verb]["msg_color"]);
                        if( stringp(imsg) )
                                arg = replace_string(imsg, local, me->name());
                        else
                                arg = 0;
                }
                else if( verb == "rumor" && random(10) < 7 )
                        arg = EMOTE_D->do_emote(me, vb, emote_arg, 2,
                                        channels[verb]["anonymous"],
                                        channels[verb]["msg_color"]);
                else    arg = EMOTE_D->do_emote(me, vb, emote_arg, 1,
                                        0, channels[verb]["msg_color"]);

                if( !arg && emote == 2 )
                        arg = (channels[verb]["anonymous"] ? channels[verb]["anonymous"]
                                                           : me->name(channels[verb]["name_raw"])) +
                                                             vb + "\n";
                if( !arg )
                        return 0;
        }

        if( myemote && me->is_character() ) {
                if( undefinedp(channels[verb]["msg_emote"]) )
                        return notify_fail("這個頻道不支持自定義表情。\n");

                // internet channel emote
                if( channels[verb]["intermud_emote"] )
                        return notify_fail("這個頻道不支持自定義表情。\n");

                if( stringp(arg) &&
                    ((strsrch(arg, "[") != -1) ||
                     (strsrch(arg, "]") != -1)) )
                        return notify_fail("這個頻道禁止使用‘[’、‘]’等字符。\n");
        }

        if( channels[verb]["anonymous"] && ( !playerp(me) || emote || check_bad_words(me, arg)) ) {
                who = channels[verb]["anonymous"];
        } else
        if( is_player || !stringp(who=query("channel_id", me))){
                who = me->name(channels[verb]["name_raw"]);
                if( !stringp(who) ) who = me->query_name();
                if( who == me->name(1) )
                        who += channels[verb]["msg_color"] +
                               "[" + capitalize(query("id", me)) + "]";
                else if( is_player || me->is_baby() )
                        do_channel(this_object(),"sys",sprintf(HIW"%s(%s)"HIW"扮%s"HIW"！",me->name(1),query("id", me),me->name()));
                if( who[0] == 27 ) who = NOR + who;
                who += channels[verb]["msg_color"];
        }

        // Ok, now send the message to those people listening us.
        obs = all_interactive();
        if (stringp(channels[verb]["only"]))
                obs = filter_array(obs, (: filter_listener :),
                                   channels[verb]["only"], me);

        //if( !stringp(arg) || arg == "" || arg == " " )
        arg = arg || (emote ? "看起來表情豐富。" : "..." );

        if( emote ) {
                string localmsg = arg;
                string ecol = channels[verb]["msg_color"];
                if( emote == 2 && !arg )
                        arg = me->name(channels[verb]["name_raw"]) +
                              ecol+"["+query("id", me)+"@"+
                              MUD_INTERMUD_NAME + "]" + arg;
                if( !stringp(arg) ) return 0;

                if( channels[verb]["msg_emote"] )
                        localmsg = remove_addresses(arg, 0); // 98-1-22 14:30

                if( channels[verb]["omit_address"] )
                        localmsg = remove_addresses(arg, 1);
                else if( channels[verb]["intermud_emote"] )
                        localmsg = remove_addresses(arg, 0);

                if( !stringp(localmsg) ) return 0;
                msg = sprintf(channels[verb]["msg_emote"],
                              sprintf(localmsg, ecol, ecol, ecol));
        } else if( myemote ) {
                if( channels[verb]["anonymous"] && !playerp(me) )
                        arg = channels[verb]["anonymous"] + arg + "\n";
                else
                        arg=query("name", me)+arg+"\n";
                msg = sprintf(channels[verb]["msg_emote"], arg);
        } else {
                // 特殊處理channel_broadcast信息顯示
                if( me == this_object() ) {
                        msg = sprintf(channels[verb]["msg_speak"], "", arg);
                        msg = replace_string(msg, "：", "");
                }
                else
                        msg = sprintf(channels[verb]["msg_speak"], who, arg);
        }

        if( channels[verb]["anonymous"] && (playerp(me) || me->is_baby()) ) {
                do_channel(this_object(), "sys",
                           sprintf("%s(%s)正在向%s頻道發出信息。",
                              query("name", me),query("id", me),verb));
                SPECIAL_NPC->receive_report(me, verb);
        }

        tobs = filter_array(obs, (: query_temp("tomud", $1) :));
        pobs = obs - tobs;
        message("channel:" + ((verb == "ultra") ? "chat" : verb), msg, pobs);
        msg = replace_string(msg, "\n[2;37;0m", "");
        msg += NOR;
        message("channel:" + ((verb == "ultra") ? "chat" : verb), msg, tobs);
        channel_log(msg, verb, me);
        obs->add_msg_log(verb, msg + "\n");

        if( (playerp(me) || me->is_baby()) && !emote && !check_bad_words(me, msg) )
        {
                if( !query("badwords", me) || query("badwords", me)<2 )
                {
                        me->ban_say_until(60, "由于你言語中帶有污穢言詞，你所有公開聊天頻道暫時被關閉");

                        message("channel:chat",
                                        HIR"【系統通告】玩家"+query("name", me)+
                                        "言語中帶有污穢言詞，暫時關閉其所有公開聊天頻道，並記錄在案！\n" NOR, users());
                        addn("badwords", 1, me);
                }
                else
                {
                        message("channel:chat",
                                        HIR"【系統通告】玩家"+query("name", me)+
                                        "連續三次言語中帶有污穢言詞，被暫時監禁，並記錄在案，等候處理！\n" NOR, users());
                        delete("badwords", me);
                        me->get_into_prison(0, 0, 180);
                }
        }

        if( arrayp(channels[verb]["extra_listener"]) ) {
                channels[verb]["extra_listener"] -= ({ 0 });
                if( sizeof(channels[verb]["extra_listener"]) )
                        channels[verb]["extra_listener"]->relay_channel(me, verb, arg);
        }

        if( !undefinedp(channels[verb]["intermud"]) && me->is_character() ) {
                channels[verb]["intermud"]->send_msg(channels[verb]["intermud_channel"],
                                                     query("id", me),me->name(1),
                                                     imsg ? imsg : arg, emote,
                                                     channels[verb]["filter"]);
        }

        return 1;
}

int filter_listener(object ppl, string only, object me)
{
        // Don't bother those in the login limbo.
        //if ( !environment(ppl) ) return 0;

        switch (only)
        {
        case "imm":
                return (wiz_level(ppl) >= 1);

        case "arch":
                return (wiz_level(ppl) >= 4);

        case "wiz":
                return (wiz_level(ppl) >= 3);

        case "sys":
                return 1;

        case "family":
                return (wizardp(ppl) || query("family/family_name", ppl) == query("family/family_name", me));

        case "bt":
                return (wizardp(ppl) || query_temp("battle/team_name", ppl) == query_temp("battle_team_name", me));
                
        case "party":
                return (wizardp(ppl) || query("bunch/bunch_name", ppl) == query("bunch/bunch_name", me));

        case "league":
                return (wizardp(ppl) || query("league/league_name", ppl) == query("league/league_name", me));
        }

        return 1;
}

void register_relay_channel(string channel)
{
        object ob;
        ob = previous_object();

        if( undefinedp(channels[channel]) || !ob )
                return;
        if( arrayp(channels[channel]["extra_listener"]) ) {
                if( member_array(ob, channels[channel]["extra_listener"]) >= 0 )
                        return;
                channels[channel]["extra_listener"] += ({ ob });
        }
        else    channels[channel]["extra_listener"] = ({ ob });
}

string remove_addresses(string msg, int all)
{
        int i;
        mixed tmp;
        string pattern;

        if( !stringp(msg) ) return msg;
        if( all )
                pattern = "[(][A-Za-z]+@[a-zA-Z]+[0-9]+[.]?[)]";
        else
                pattern = "[(][A-Za-z]+@" + MUD_INTERMUD_NAME + "[)]";

        tmp = reg_assoc(msg, ({ pattern }), ({ 1 }));

        if( !arrayp(tmp) ) return msg;
        msg = "";
        for( i=0; i<sizeof(tmp[0]); i++ )
                if( tmp[1][i] == 0 ) msg += tmp[0][i];
        return msg;
}

protected int check_bad_words(object user, string msg)
{
        int i;
        string old_msg = msg;

        msg = replace_string(msg,"益機","");
        msg = replace_string(msg,"緙絲","");
        msg = replace_string(msg,"規還","");
        msg = replace_string(msg,"ａ","a");
        msg = replace_string(msg,"ｂ","b");
        msg = replace_string(msg,"ｃ","c");
        msg = replace_string(msg,"ｄ","d");
        msg = replace_string(msg,"ｅ","e");
        msg = replace_string(msg,"ｆ","f");
        msg = replace_string(msg,"ｇ","g");
        msg = replace_string(msg,"ｈ","h");
        msg = replace_string(msg,"ｉ","i");
        msg = replace_string(msg,"ｊ","j");
        msg = replace_string(msg,"ｋ","k");
        msg = replace_string(msg,"ｌ","l");
        msg = replace_string(msg,"ｍ","m");
        msg = replace_string(msg,"ｎ","n");
        msg = replace_string(msg,"ｏ","o");
        msg = replace_string(msg,"ｐ","p");
        msg = replace_string(msg,"ｑ","q");
        msg = replace_string(msg,"ｒ","r");
        msg = replace_string(msg,"ｓ","s");
        msg = replace_string(msg,"ｔ","t");
        msg = replace_string(msg,"ｕ","u");
        msg = replace_string(msg,"ｖ","v");
        msg = replace_string(msg,"ｗ","w");
        msg = replace_string(msg,"ｘ","x");
        msg = replace_string(msg,"ｙ","y");
        msg = replace_string(msg,"ｚ","z");
/*
        msg = lower_case(msg);
        msg = replace_string(msg,",","");
        msg = replace_string(msg,".","");
        msg = replace_string(msg,";","");
        msg = replace_string(msg,"，","");
        msg = replace_string(msg,"。","");
        msg = replace_string(msg,"；","");
        msg = replace_string(msg," ","");
        msg = replace_string(msg,"□","");
        msg = replace_string(msg,"'","");
        msg = replace_string(msg,"\"","");
        msg = replace_string(msg,"”","");
        msg = replace_string(msg,"“","");
        msg = replace_string(msg,"[","");
        msg = replace_string(msg,"]","");
        msg = replace_string(msg,"『","");
        msg = replace_string(msg,"』","");
        msg = replace_string(msg,"【","");
        msg = replace_string(msg,"】","");
        msg = replace_string(msg,"’","");
        msg = replace_string(msg,"‘","");
*/

        for( i = 0; i < sizeof(bad_words);i ++ )
        {
                if( strsrch(msg, bad_words[i]) != -1 )
                {
                        log_file("channel/bad_word",sprintf("%s(%s)于%s涉嫌講臟話：\n%s-->%s\n",
                                                             user->name(1),
                                                             query("id", user),
                                                             ctime(time()),
                                                             filter_color(old_msg),
                                                             bad_words[i]) );
                        return 0;
                }
        }
        return 1;
}

varargs void channel_broadcast(string channel, string msg, mixed arg)
{
        if( undefinedp(arg) )
                do_channel(this_object(), channel, msg);
        else if( objectp(arg) )
                do_channel(arg, channel, msg);
        else
                do_channel(this_object(), channel, msg, arg);
}
